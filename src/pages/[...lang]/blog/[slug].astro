---
import BlogLayout from '../../../layouts/BlogLayout.astro';
import { getLangFromUrl, useTranslations } from '../../../i18n/locales';

export async function getStaticPaths() {
  const paths = [];
  
  // Spanish posts
  const esPosts = await Astro.glob('../../../content/blog/*.md');
  esPosts.forEach(post => {
    paths.push({
      params: { lang: undefined, slug: post.frontmatter.slug || 'post' },
      props: { post }
    });
  });
  
  // English posts
  const enPosts = await Astro.glob('../../../content/blog/en/*.md');
  enPosts.forEach(post => {
    paths.push({
      params: { lang: 'en', slug: post.frontmatter.slug || 'post' },
      props: { post }
    });
  });
  
  // Portuguese posts
  const ptPosts = await Astro.glob('../../../content/blog/pt/*.md');
  ptPosts.forEach(post => {
    paths.push({
      params: { lang: 'pt', slug: post.frontmatter.slug || 'post' },
      props: { post }
    });
  });
  
  return paths;
}

const { post } = Astro.props;
const { Content } = post;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<BlogLayout title={post.frontmatter.title}>
  <article class="blog-post">
    <header class="post-header">
      <time class="post-date">{new Date(post.frontmatter.date).toLocaleDateString(lang === 'es' ? 'es-ES' : lang === 'pt' ? 'pt-BR' : 'en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })}</time>
      <h1 class="post-title">{post.frontmatter.title}</h1>
    </header>
    
    <div class="post-content">
      <Content />
    </div>
    
    <footer class="post-footer">
      <a href={lang === 'es' ? '/blog' : `/${lang}/blog`} class="back-link">{t('blog.back')}</a>
    </footer>
  </article>
</BlogLayout>

<style is:global>
  .blog-post {
    max-width: 600px;
  }

  .post-header {
    margin-bottom: 3rem;
  }

  .post-date {
    font-size: 0.875rem;
    color: var(--text-light);
    letter-spacing: 0.02em;
  }

  .post-title {
    font-size: 2rem;
    font-weight: 400;
    margin: 0.5rem 0;
    color: var(--text);
    line-height: 1.3;
  }

  .post-content {
    font-size: 1rem;
    line-height: 1.8;
    color: var(--text);
  }

  .post-content p {
    margin-bottom: 1.5rem;
  }

  .post-content h2 {
    font-size: 1.5rem;
    font-weight: 400;
    margin: 2rem 0 1rem 0;
    color: var(--text);
  }

  .post-content h3 {
    font-size: 1.25rem;
    font-weight: 400;
    margin: 1.5rem 0 1rem 0;
    color: var(--text);
  }

  .post-content ul,
  .post-content ol {
    margin-bottom: 1.5rem;
    padding-left: 2rem;
  }

  .post-content li {
    margin-bottom: 0.5rem;
  }

  .post-content blockquote {
    margin: 2rem 0;
    padding-left: 1.5rem;
    border-left: 2px solid var(--text-light);
    font-style: italic;
    color: var(--text-light);
  }

  .post-content a {
    color: var(--text);
    text-decoration: underline;
    text-decoration-color: var(--text-light);
    transition: opacity 0.3s ease;
  }

  .post-content a:hover {
    opacity: 0.7;
  }

  .post-content img {
    max-width: 100%;
    height: auto;
    margin: 2rem 0;
    border-radius: 4px;
  }

  .post-content code {
    background: rgba(0, 0, 0, 0.05);
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-size: 0.9em;
    font-family: 'Courier New', monospace;
  }

  .post-content pre {
    background: rgba(0, 0, 0, 0.05);
    padding: 1rem;
    border-radius: 4px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .post-content pre code {
    background: none;
    padding: 0;
  }

  .post-footer {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
  }

  .back-link {
    color: var(--text);
    text-decoration: none;
    font-size: 0.95rem;
    letter-spacing: 0.02em;
    transition: opacity 0.3s ease;
  }

  .back-link:hover {
    opacity: 0.7;
  }

  @media (max-width: 768px) {
    .post-title {
      font-size: 1.5rem;
    }

    .post-content {
      font-size: 0.95rem;
    }

    .post-content h2 {
      font-size: 1.25rem;
    }

    .post-content h3 {
      font-size: 1.1rem;
    }
  }
</style>